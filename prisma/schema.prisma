generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                 @id @default(cuid())
  email              String                 @unique
  password           String
  name               String?
  telephone          String?
  whatsapp           String?
  notes              String?
  role               String                 @default("SELLER")
  isActive           Boolean                @default(true)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  locationId         String?
  distributorId      String?
  configurationId    String?
  configurationName  String?
  savedConfigId      String?
  distributorProfile Distributor?           @relation("DistributorUser")
  locationProfile    Location?              @relation("LocationUser")
  sellerConfigs      QRConfig?              @relation("SellerConfig")
  accounts           Account[]
  sellerQRCodes      QRCode[]               @relation("SellerQRCodes")
  landingPageUrls    SellerLandingPageUrl[] @relation("SellerLandingUrls")
  sessions           Session[]
  location           Location?              @relation("LocationSellers", fields: [locationId], references: [id])
  savedConfig        SavedQRConfiguration?  @relation("UserSavedConfig", fields: [savedConfigId], references: [id])
  analytics          QRCodeAnalytics[]      @relation("SellerAnalytics")
  preferences        UserPreferences?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model QRConfig {
  id                           String   @id @default(cuid())
  sellerId                     String   @unique
  sendMethod                   String   @default("URL")
  landingPageRequired          Boolean  @default(true)
  allowCustomGuestsDays        Boolean  @default(false)
  defaultGuests                Int      @default(2)
  defaultDays                  Int      @default(3)
  pricingType                  String   @default("FIXED")
  fixedPrice                   Float?
  sendRebuyEmail               Boolean  @default(false)
  button1GuestsLocked          Boolean  @default(false)
  button1GuestsDefault         Int      @default(2)
  button1GuestsRangeMax        Int      @default(10)
  button1DaysLocked            Boolean  @default(false)
  button1DaysDefault           Int      @default(3)
  button1DaysRangeMax          Int      @default(30)
  button2PricingType           String   @default("FIXED")
  button2FixedPrice            Float?   @default(0)
  button2VariableBasePrice     Float    @default(10)
  button2VariableGuestIncrease Float    @default(5)
  button2VariableDayIncrease   Float    @default(3)
  button2VariableCommission    Float    @default(0)
  button2IncludeTax            Boolean  @default(false)
  button2TaxPercentage         Float    @default(0)
  button3DeliveryMethod        String?
  button4LandingPageRequired   Boolean?
  button5SendRebuyEmail        Boolean?
  button6AllowFutureQR         Boolean?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  seller                       User     @relation("SellerConfig", fields: [sellerId], references: [id], onDelete: Cascade)
}

model QrGlobalConfig {
  id                           String   @id @default(cuid())
  button1AllowCustomGuestsDays Boolean  @default(false)
  button1DefaultGuests         Int      @default(2)
  button1DefaultDays           Int      @default(3)
  button1MaxGuests             Int      @default(10)
  button1MaxDays               Int      @default(30)
  button1GuestsLocked          Boolean  @default(false)
  button1GuestsDefault         Int      @default(2)
  button1GuestsRangeMax        Int      @default(10)
  button1DaysLocked            Boolean  @default(false)
  button1DaysDefault           Int      @default(3)
  button1DaysRangeMax          Int      @default(30)
  button2PricingType           String   @default("FIXED")
  button2FixedPrice            Float?   @default(0)
  button2VariableBasePrice     Float    @default(10)
  button2VariableGuestIncrease Float    @default(5)
  button2VariableDayIncrease   Float    @default(3)
  button2VariableCommission    Float    @default(0)
  button2IncludeTax            Boolean  @default(false)
  button2TaxPercentage         Float    @default(0)
  button3DeliveryMethod        String?
  button4LandingPageRequired   Boolean?
  button5SendRebuyEmail        Boolean?
  button6AllowFutureQR         Boolean?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("QRGlobalConfig")
}

model LandingPageTemplate {
  id              String   @id @default(cuid())
  name            String
  logoUrl         String?
  primaryColor    String   @default("#f97316")
  secondaryColor  String   @default("#fb923c")
  backgroundColor String   @default("#fef3f2")
  headerText      String
  descriptionText String
  ctaButtonText   String
  showPayPal      Boolean  @default(true)
  showContactForm Boolean  @default(true)
  customCSS       String?
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("landing_page_templates")
}

model WelcomeEmailTemplate {
  id              String   @id @default(cuid())
  name            String
  subject         String   @default("Welcome to ELocalPass!")
  logoUrl         String?
  headerText      String   @default("Welcome to Your ELocalPass Experience!")
  bodyText        String   @default("Thank you for choosing ELocalPass. Your pass is ready to use.")
  footerText      String   @default("Enjoy your local experiences!")
  primaryColor    String   @default("#f97316")
  backgroundColor String   @default("#ffffff")
  buttonColor     String   @default("#f97316")
  buttonText      String   @default("View Your Pass")
  customHTML      String?
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("welcome_email_templates")
}

model RebuyEmailTemplate {
  id              String   @id @default(cuid())
  name            String
  subject         String   @default("Your ELocalPass Expires Soon - Get Another!")
  logoUrl         String?
  headerText      String   @default("Don't Let Your Local Adventure End!")
  bodyText        String   @default("Your ELocalPass expires in 12 hours. Get another pass to continue your local experiences.")
  footerText      String   @default("Thank you for choosing ELocalPass!")
  primaryColor    String   @default("#f97316")
  backgroundColor String   @default("#ffffff")
  buttonColor     String   @default("#f97316")
  buttonText      String   @default("Get Another Pass")
  customHTML      String?
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("rebuy_email_templates")
}

model SellerLandingPageUrl {
  id          String   @id @default(cuid())
  sellerId    String
  name        String
  url         String?
  description String?
  isActive    Boolean  @default(true)
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      User     @relation("SellerLandingUrls", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("seller_landing_page_urls")
}

model LandingPageSubmission {
  id              String   @id @default(cuid())
  qrCodeId        String
  clientName      String
  email           String
  phone           String?
  guests          Int      @default(2)
  specialRequests String?
  submittedAt     DateTime @default(now())
  qrCode          QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  @@map("landing_page_submissions")
}

model QRCode {
  id            String                  @id @default(cuid())
  code          String                  @unique
  sellerId      String
  customerName  String?                 // Customer name for magic link access
  customerEmail String?                 // Customer email for magic link access
  guests        Int                     @default(2)
  days          Int                     @default(3)
  cost          Float                   @default(0.0)
  expiresAt     DateTime
  isActive      Boolean                 @default(true)
  landingUrl    String?
  createdAt     DateTime                @default(now())
  submissions   LandingPageSubmission[]
  seller        User                    @relation("SellerQRCodes", fields: [sellerId], references: [id], onDelete: Cascade)
  scans         QRScan[]
  accessTokens    CustomerAccessToken[]
  usage           QRCodeUsage[]
  activations     QRCodeActivation[]
  analytics       QRCodeAnalytics?
  affiliateVisits AffiliateVisit[]      @relation("AffiliateQRVisits")

  @@map("qr_codes")
}

model QRScan {
  id        String   @id @default(cuid())
  qrCodeId  String
  scannedAt DateTime @default(now())
  location  String?
  business  String?
  qrCode    QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  @@map("qr_scans")
}

model Distributor {
  id            String              @id @default(cuid())
  name          String
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  userId        String              @unique
  contactPerson String?
  email         String?
  notes         String?
  telephone     String?
  whatsapp      String?
  user          User                @relation("DistributorUser", fields: [userId], references: [id], onDelete: Cascade)
  locations     Location[]          @relation("DistributorLocations")
  analytics     QRCodeAnalytics[]   @relation("DistributorAnalytics")
}

model Location {
  id            String              @id @default(cuid())
  name          String
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  distributorId String
  userId        String              @unique
  contactPerson String?
  email         String?
  notes         String?
  telephone     String?
  whatsapp      String?
  user          User                @relation("LocationUser", fields: [userId], references: [id], onDelete: Cascade)
  distributor   Distributor         @relation("DistributorLocations", fields: [distributorId], references: [id], onDelete: Cascade)
  sellers       User[]              @relation("LocationSellers")
  analytics     QRCodeAnalytics[]   @relation("LocationAnalytics")
}

model SavedQRConfiguration {
  id                String   @id @default(cuid())
  name              String
  description       String?
  config            String
  emailTemplates    String?
  landingPageConfig String?
  selectedUrlIds    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  assignedUsers     User[]   @relation("UserSavedConfig")

  @@map("saved_qr_configurations")
}

model CustomerAccessToken {
  id            String   @id @default(cuid())
  token         String   @unique
  qrCodeId      String
  customerEmail String
  customerName  String
  expiresAt     DateTime
  usedAt        DateTime?
  createdAt     DateTime @default(now())
  
  qrCode        QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  
  @@map("customer_access_tokens")
}

model QRCodeUsage {
  id            String   @id @default(cuid())
  qrCodeId      String
  customerEmail String
  customerName  String
  affiliateName String?  // Name of restaurant/store/service
  affiliateType String?  // Type: restaurant, store, service, etc.
  discountType  String?  // Type of discount received
  discountValue String?  // Value/description of discount
  usedAt        DateTime @default(now())
  notes         String?  // Additional notes about the usage
  
  qrCode        QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  
  @@map("qr_code_usage")
}

model QRCodeActivation {
  id            String   @id @default(cuid())
  qrCodeId      String
  customerEmail String
  customerName  String
  guests        Int
  days          Int
  cost          Float
  activatedAt   DateTime @default(now())
  expiresAt     DateTime
  isActive      Boolean  @default(true)
  sellerId      String?  // Who processed this activation
  
  qrCode        QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  
  @@map("qr_code_activations")
}

model QRCodeAnalytics {
  id                    String   @id @default(cuid())
  qrCodeId              String   @unique
  qrCode                String   // The actual QR code string
  
  // Customer Information
  customerName          String
  customerEmail         String
  
  // QR Code Details
  guests                Int
  days                  Int
  cost                  Float
  expiresAt             DateTime
  isActive              Boolean  @default(true)
  deliveryMethod        String   // DIRECT, URLS, BOTH
  language              String   @default("en")
  
  // Seller Information
  sellerId              String
  sellerName            String?
  sellerEmail           String
  
  // Location Information (via seller)
  locationId            String?
  locationName          String?
  
  // Distributor Information (via location)
  distributorId         String?
  distributorName       String?
  
  // Configuration Information
  configurationId       String
  configurationName     String?
  pricingType           String   // FIXED, VARIABLE
  fixedPrice            Float?
  variableBasePrice     Float?
  variableGuestIncrease Float?
  variableDayIncrease   Float?
  variableCommission    Float?
  includeTax            Boolean  @default(false)
  taxPercentage         Float?
  
  // Revenue Breakdown
  baseAmount            Float    @default(0)
  guestAmount           Float    @default(0)
  dayAmount             Float    @default(0)
  commissionAmount      Float    @default(0)
  taxAmount             Float    @default(0)
  totalAmount           Float    @default(0)
  
  // Tracking & Analytics
  landingUrl            String?
  magicLinkUrl          String?
  welcomeEmailSent      Boolean  @default(false)
  rebuyEmailScheduled   Boolean  @default(false)
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  qrCodeRecord          QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  seller                User     @relation("SellerAnalytics", fields: [sellerId], references: [id], onDelete: Cascade)
  location              Location? @relation("LocationAnalytics", fields: [locationId], references: [id], onDelete: SetNull)
  distributor           Distributor? @relation("DistributorAnalytics", fields: [distributorId], references: [id], onDelete: SetNull)
  
  @@map("qr_code_analytics")
}

model ScheduledQRCode {
  id              String   @id @default(cuid())
  scheduledFor    DateTime
  clientName      String
  clientEmail     String
  guests          Int
  days            Int
  sellerId        String
  configurationId String
  deliveryMethod  String   @default("DIRECT")
  landingPageId   String?
  isProcessed     Boolean  @default(false)
  processedAt     DateTime?
  createdQRCodeId String?  // Will be set when QR is actually created
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("scheduled_qr_codes")
}

// AFFILIATE SYSTEM MODELS
model Affiliate {
  id             String   @id @default(cuid())
  affiliateNum   String?  // Affiliate # from Google Sheet
  isActive       Boolean  @default(true)
  name           String   // Business name
  firstName      String?
  lastName       String?
  email          String   @unique
  workPhone      String?
  whatsApp       String?
  address        String?
  web            String?
  description    String?  // "Descripcion" from sheet
  city           String?
  maps           String?  // Google Maps link
  location       String?  // Location description
  discount       String?  // Discount offered (percentage or description)
  logo           String?  // Logo URL
  facebook       String?
  instagram      String?
  category       String?
  subCategory    String?  // "Sub-Categoria" from sheet
  service        String?
  type           String?
  sticker        String?
  rating         Float?
  recommended    Boolean  @default(false)
  termsConditions String? // "Terms&Cond" from sheet
  
  // Internal tracking
  totalVisits    Int      @default(0)
  lastVisitAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  sessions       AffiliateSession[] @relation("AffiliateSessions") 
  visits         AffiliateVisit[]   @relation("AffiliateVisits")
  
  @@map("affiliates")
}

model AffiliateSession {
  id          String   @id @default(cuid())
  affiliateId String
  sessionToken String  @unique
  deviceInfo  String?  // Browser/device info for identification
  ipAddress   String?
  isActive    Boolean  @default(true)
  expiresAt   DateTime // Long-lasting (30 days)
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  
  affiliate   Affiliate @relation("AffiliateSessions", fields: [affiliateId], references: [id], onDelete: Cascade)
  
  @@map("affiliate_sessions")
}

model AffiliateVisit {
  id              String   @id @default(cuid())
  affiliateId     String
  qrCodeId        String
  qrCode          String   // The actual QR code scanned
  customerName    String
  customerEmail   String
  discountApplied String   // Discount from affiliate's record
  visitedAt       DateTime @default(now())
  visitDate       DateTime @default(now()) @db.Date // For once-per-day logic
  deviceInfo      String?  // Which device/employee scanned
  notes           String?
  
  // Relations
  affiliate       Affiliate @relation("AffiliateVisits", fields: [affiliateId], references: [id], onDelete: Cascade)
  qrCodeRecord    QRCode    @relation("AffiliateQRVisits", fields: [qrCodeId], references: [id], onDelete: Cascade)
  
  // Ensure once per day per affiliate per QR
  @@unique([affiliateId, qrCodeId, visitDate])
  @@map("affiliate_visits")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  affiliateColumnWidths Json?    // Store column widths as JSON
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}
